#!/bin/bash

if kind get clusters -q | grep crossplane; then
  kind export kubeconfig --name crossplane
  exit 0
fi

cd "$(dirname "$0")" || exit

cd ..

workspaceDir="$PWD"

cd - > /dev/null || exit

# shellcheck source=/dev/null
source "$workspaceDir"/credentials

cat <<EOF | kind create cluster --name crossplane --config=-
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
networking:
  podSubnet: "10.95.0.0/16"
  serviceSubnet: "10.96.0.0/12"
  disableDefaultCNI: true
  kubeProxyMode: none
nodes:
- role: control-plane
  kubeadmConfigPatches:
  - |
    kind: ClusterConfiguration
    controllerManager:
      extraArgs:
        bind-address: 0.0.0.0
        #secure-port: "0"
        #port: "10257"
    etcd:
      local:
        extraArgs:
          listen-metrics-urls: http://0.0.0.0:2381
    scheduler:
      extraArgs:
        bind-address: 0.0.0.0
        #secure-port: "0"
        #port: "10259"
  - |
    kind: KubeProxyConfiguration
    metricsBindAddress: 0.0.0.0
  extraMounts:
  - containerPath: /var/lib/kubelet/config.json
    hostPath: "$HOME/.docker/config.json"
  extraPortMappings:
    - containerPort: 443
      hostPort: 443
    - containerPort: 80
      hostPort: 80
EOF


helm upgrade --install --namespace kube-system --repo https://helm.cilium.io cilium cilium --values - <<EOF
kubeProxyReplacement: strict
k8sServiceHost: crossplane-control-plane # use master node in kind network
k8sServicePort: 6443               # use api server port
hostServices:
  enabled: false
externalIPs:
  enabled: true
nodePort:
  enabled: true
hostPort:
  enabled: true
image:
  pullPolicy: IfNotPresent
ipam:
  mode: kubernetes
hubble:
  enabled: true
  relay:
    enabled: true
operator:
  replicas: 1
EOF

kubectl wait --for condition=ready pod --namespace kube-system --all --timeout 300s

helm repo add crossplane-stable https://charts.crossplane.io/stable
helm repo update
helm install crossplane \
--namespace crossplane-system \
--create-namespace \
crossplane-stable/crossplane \
--wait

kubectl wait --for condition=ready pod --namespace crossplane-system --all --timeout 300s

kubectl apply -f https://raw.githubusercontent.com/irizzante/crossplane/main/crossplane/configurations/gitops.yaml

sleep 10

kubectl delete configuration gitops

kubectl wait --for condition=ready pod --namespace crossplane-system --all --timeout 300s

SA=$(kubectl -n crossplane-system get sa -o name | grep provider-kubernetes | sed -e 's|serviceaccount\/|crossplane-system:|g')
kubectl create clusterrolebinding provider-kubernetes-admin-binding --clusterrole cluster-admin --serviceaccount="${SA}"

SA=$(kubectl -n crossplane-system get sa -o name | grep provider-helm | sed -e 's|serviceaccount\/|crossplane-system:|g')
kubectl create clusterrolebinding provider-helm-admin-binding --clusterrole cluster-admin --serviceaccount="${SA}"

helm repo add argo https://argoproj.github.io/argo-helm
helm upgrade --install argocd --wait -n argocd -f "$workspaceDir"/argocd/values/argocd.yaml --create-namespace argo/argo-cd --version 5.41.1

kubectl create ns port

kubectl -n crossplane-system create secret generic gitlab-secret --from-literal=token="$gitlabToken"

cat << EOF | kubectl apply -f-
apiVersion: v1
kind: Secret
metadata:
  name: github-provider
  namespace: crossplane-system
type: Opaque
stringData:
  credentials: "{\"token\":\"$gitHubPat\",\"owner\":\"$gitHubOwner\"}"
EOF

kubectl apply -f "$workspaceDir"/platform/
